// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

// User Management
model User {
  id        String   @id @default(cuid()) @db.VarChar(25)
  email     String   @unique @db.VarChar(255)
  username  String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  images    Image[]
  likes     Like[]
  tags      Tag[]
  prompts   Prompt[]

  @@map("users")
}

// Image Management
model Image {
  id          String   @id @default(cuid()) @db.VarChar(25)
  userId      String   @db.VarChar(25)
  prompt      String   @db.Text
  original    String   @db.Text
  imageUrl    String   @db.VarChar(500)
  provider    String   @db.VarChar(50)
  guidance    Int      @default(10)
  model       String?  @db.VarChar(100)
  rating      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  tags        Tag[]

  @@map("images")
}

// Like Management
model Like {
  id        String   @id @default(cuid()) @db.VarChar(25)
  userId    String   @db.VarChar(25)
  imageId   String   @db.VarChar(25)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId])
  @@map("likes")
}

// Tag Management
model Tag {
  id        String   @id @default(cuid()) @db.VarChar(25)
  userId    String   @db.VarChar(25)
  imageId   String   @db.VarChar(25)
  tag       String   @db.VarChar(100)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId, tag])
  @@map("tags")
}

// Prompt Management
model Prompt {
  id        String   @id @default(cuid()) @db.VarChar(25)
  userId    String   @db.VarChar(25)
  prompt    String   @db.Text
  original  String   @db.Text
  provider  String   @db.VarChar(50)
  guidance  Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prompts")
}

// Word Type Management
model WordType {
  id        String   @id @default(cuid()) @db.VarChar(25)
  word      String   @unique @db.VarChar(100)
  types     Json     // Array of word types
  examples  Json?    // Array of examples
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("word_types")
}

// Category Management
model Category {
  id          String   @id @default(cuid()) @db.VarChar(25)
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

// Multiplier Management
model Multiplier {
  id        String   @id @default(cuid()) @db.VarChar(25)
  name      String   @unique @db.VarChar(100)
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("multipliers")
}

// Prompt Clause Management
model PromptClause {
  id        String   @id @default(cuid()) @db.VarChar(25)
  clause    String   @unique @db.VarChar(255)
  category  String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prompt_clauses")
}
