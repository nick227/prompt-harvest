import databaseClient from '../database/PrismaClient.js';

export class AdminDashboardService {
    constructor() {
        this.prisma = databaseClient.getClient();
    }

    /**
     * Get basic statistics for the dashboard
     */
    async getBasicStats() {
        const [
            totalUsers,
            totalImages,
            totalTransactions,
            totalStripePayments,
            totalRevenue
        ] = await Promise.all([
            this.prisma.user.count(),
            this.prisma.image.count(),
            this.prisma.transaction.count(),
            this.prisma.stripePayment.count({
                where: { status: 'completed' }
            }),
            this.prisma.stripePayment.aggregate({
                where: { status: 'completed' },
                _sum: { amount: true }
            })
        ]);

        return {
            totalUsers,
            totalImages,
            totalTransactions,
            totalStripePayments,
            totalRevenue: totalRevenue._sum.amount || 0
        };
    }

    /**
     * Get recent activity statistics
     */
    async getRecentActivityStats() {
        const [recentUsers, recentImages] = await Promise.all([
            // Recent users (last 7 days)
            this.prisma.user.count({
                where: {
                    createdAt: {
                        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
                    }
                }
            }),
            // Recent images (last 24 hours)
            this.prisma.image.count({
                where: {
                    createdAt: {
                        gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
                    }
                }
            })
        ]);

        return { recentUsers, recentImages };
    }

    /**
     * Get system metrics (mock data for now)
     */
    async getSystemMetrics() {
        return {
            avgResponseTime: 245,
            successRate: 98.5,
            cpuUsage: 35.2,
            memoryUsage: 67.8
        };
    }

    /**
     * Get recent activity with user details
     * OPTIMIZED: Uses Prisma include for efficient JOIN (1 query instead of 2+)
     */
    async getRecentActivityWithUsers(limit = 5) {
        const recentActivity = await this.prisma.image.findMany({
            take: limit,
            orderBy: { createdAt: 'desc' },
            include: {
                user: {
                    select: {
                        id: true,
                        email: true,
                        username: true
                    }
                }
            }
        });

        return recentActivity;
    }

    /**
     * Format recent activity for display
     */
    formatRecentActivity(recentActivityWithUsers) {
        return (recentActivityWithUsers || []).map(image => ({
            type: 'image_generation',
            description: `Image generated by ${image.user.email}`,
            timestamp: image.createdAt
        }));
    }

    /**
     * Get the most recent image details
     */
    getMostRecentImage(recentActivityWithUsers) {
        if (!recentActivityWithUsers || recentActivityWithUsers.length === 0) {
            return null;
        }

        const [mostRecentImage] = recentActivityWithUsers;

        return {
            id: mostRecentImage.id,
            imageUrl: mostRecentImage.imageUrl,
            prompt: mostRecentImage.prompt,
            provider: mostRecentImage.provider,
            model: mostRecentImage.model,
            createdAt: mostRecentImage.createdAt,
            user: {
                email: mostRecentImage.user.email,
                username: mostRecentImage.user.username
            }
        };
    }

    /**
     * Get server health information
     */
    getServerHealth() {
        return {
            cpuUsage: 35.2, // This would come from system metrics
            memoryUsage: 67.8, // This would come from system metrics
            uptime: process.uptime(),
            memoryUsageMB: Math.round(process.memoryUsage().heapUsed / 1024 / 1024)
        };
    }

    /**
     * Calculate conversion rate
     */
    calculateConversionRate(totalUsers, totalPayments) {
        return totalUsers > 0 ? ((totalPayments / totalUsers) * 100).toFixed(1) : 0;
    }

    /**
     * Get complete dashboard data
     */
    async getDashboardData(adminUser) {
        const [basicStats, recentStats, systemMetrics, recentActivityWithUsers] = await Promise.all([
            this.getBasicStats(),
            this.getRecentActivityStats(),
            this.getSystemMetrics(),
            this.getRecentActivityWithUsers()
        ]);

        const activityList = this.formatRecentActivity(recentActivityWithUsers);
        const mostRecentImage = this.getMostRecentImage(recentActivityWithUsers);
        const serverHealth = this.getServerHealth();
        const conversionRate = this.calculateConversionRate(basicStats.totalUsers, basicStats.totalStripePayments);

        return {
            stats: {
                totalUsers: basicStats.totalUsers,
                totalImages: basicStats.totalImages,
                totalTransactions: basicStats.totalTransactions,
                activeSessions: recentStats.recentUsers,
                totalRevenue: basicStats.totalRevenue,
                totalPayments: basicStats.totalStripePayments,
                recentImages24h: recentStats.recentImages
            },
            metrics: {
                avgResponseTime: systemMetrics.avgResponseTime,
                successRate: systemMetrics.successRate,
                recentActivity: activityList,
                conversionRate
            },
            recentImage: mostRecentImage,
            health: serverHealth,
            timestamp: new Date().toISOString(),
            adminUser: {
                id: adminUser.id,
                email: adminUser.email,
                username: adminUser.username
            }
        };
    }
}
